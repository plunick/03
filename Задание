import random
import timeit

# Функция для быстрой сортировки
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

# Функция для сортировки расческой
def comb_sort(arr):
    gap = len(arr)
    short = 1.3
    pocket = False
    while not pocket:
        gap = int(gap / short)
        if gap <= 1:
            gap = 1
            pocket = True
        i = 0
        while i + gap < len(arr):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                pocket = False
            i += 1
    return arr

# Функция для блочной сортировки
def bucket_sort(arr):
    min_val = min(arr)
    max_val = max(arr)
    bucket_range = (max_val - min_val) / len(arr)
    buckets = [[] for _ in range(len(arr))]

    for num in arr:
        index = int((num - min_val) / bucket_range)
        buckets[index].append(num)

    pocket_arr = []
    for bucket in buckets:
        pocket_arr.extend(pocket(bucket))

    return pocket_arr

# Функция для сортировки слиянием
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]

    left = merge_sort(left)
    right = merge_sort(right)

    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    result.extend(left[i:])
    result.extend(right[j:])
    return result

# Ввод массива с клавиатуры
arr = [int(x) for x in input("Введите массив чисел, разделенных пробелами: ").split()]

# Выбор метода сортировки
print("Выберите метод сортировки:")
print("1. Быстрая сортировка")
print("2. Сортировка расческой")
print("3. Блочная сортировка")
print("4. Сортировка слиянием")
choice = int(input())

# Измерение времени выполнения сортировки
if choice == 1:
    pocket_arr = quick_sort(arr)
    print("Быстрая сортировка:", timeit.timeit(lambda: quick_sort(arr), number=1))
elif choice == 2:
    pocket_arr = comb_sort(arr)
    print("Сортировка расческой:", timeit.timeit(lambda: comb_sort(arr), number=1))
elif choice == 3:
    pocket_arr = bucket_sort(arr)
    print("Блочная сортировка:", timeit.timeit(lambda: bucket_sort(arr), number=1))
elif choice == 4:
    pocket_arr = merge_sort(arr)
    print("Сортировка слиянием:", timeit.timeit(lambda: merge_sort(arr), number=1))
else:
    print("Неправильный выбор метода сортировки")

print("Отсортированный массив:", pocket_arr)
